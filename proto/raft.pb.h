// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto;
class RequestVote;
class RequestVoteDefaultTypeInternal;
extern RequestVoteDefaultTypeInternal _RequestVote_default_instance_;
class RequestVoteResponse;
class RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RequestVote* Arena::CreateMaybeMessage<::RequestVote>(Arena*);
template<> ::RequestVoteResponse* Arena::CreateMaybeMessage<::RequestVoteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RequestVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestVote) */ {
 public:
  inline RequestVote() : RequestVote(nullptr) {};
  virtual ~RequestVote();

  RequestVote(const RequestVote& from);
  RequestVote(RequestVote&& from) noexcept
    : RequestVote() {
    *this = ::std::move(from);
  }

  inline RequestVote& operator=(const RequestVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVote& operator=(RequestVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVote* internal_default_instance() {
    return reinterpret_cast<const RequestVote*>(
               &_RequestVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVote& a, RequestVote& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVote* New() const final {
    return CreateMaybeMessage<RequestVote>(nullptr);
  }

  RequestVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVote& from);
  void MergeFrom(const RequestVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestVote";
  }
  protected:
  explicit RequestVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIDFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // uint32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 candidate_ID = 2;
  void clear_candidate_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 candidate_id() const;
  void set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_candidate_id() const;
  void _internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_log_index = 3;
  void clear_last_log_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_index() const;
  void set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_log_index() const;
  void _internal_set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_log_term = 4;
  void clear_last_log_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_log_term() const;
  void _internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RequestVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  ::PROTOBUF_NAMESPACE_ID::uint32 candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_log_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestVoteResponse) */ {
 public:
  inline RequestVoteResponse() : RequestVoteResponse(nullptr) {};
  virtual ~RequestVoteResponse();

  RequestVoteResponse(const RequestVoteResponse& from);
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponse* New() const final {
    return CreateMaybeMessage<RequestVoteResponse>(nullptr);
  }

  RequestVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestVoteResponse";
  }
  protected:
  explicit RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // uint32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool vote_granted = 2;
  void clear_vote_granted();
  bool vote_granted() const;
  void set_vote_granted(bool value);
  private:
  bool _internal_vote_granted() const;
  void _internal_set_vote_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RequestVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 term_;
  bool vote_granted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVote

// uint32 term = 1;
inline void RequestVote::clear_term() {
  term_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVote::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVote::term() const {
  // @@protoc_insertion_point(field_get:RequestVote.term)
  return _internal_term();
}
inline void RequestVote::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  term_ = value;
}
inline void RequestVote::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RequestVote.term)
}

// uint32 candidate_ID = 2;
inline void RequestVote::clear_candidate_id() {
  candidate_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVote::_internal_candidate_id() const {
  return candidate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVote::candidate_id() const {
  // @@protoc_insertion_point(field_get:RequestVote.candidate_ID)
  return _internal_candidate_id();
}
inline void RequestVote::_internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  candidate_id_ = value;
}
inline void RequestVote::set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:RequestVote.candidate_ID)
}

// uint32 last_log_index = 3;
inline void RequestVote::clear_last_log_index() {
  last_log_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVote::_internal_last_log_index() const {
  return last_log_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVote::last_log_index() const {
  // @@protoc_insertion_point(field_get:RequestVote.last_log_index)
  return _internal_last_log_index();
}
inline void RequestVote::_internal_set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_log_index_ = value;
}
inline void RequestVote::set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_log_index(value);
  // @@protoc_insertion_point(field_set:RequestVote.last_log_index)
}

// uint32 last_log_term = 4;
inline void RequestVote::clear_last_log_term() {
  last_log_term_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVote::_internal_last_log_term() const {
  return last_log_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVote::last_log_term() const {
  // @@protoc_insertion_point(field_get:RequestVote.last_log_term)
  return _internal_last_log_term();
}
inline void RequestVote::_internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_log_term_ = value;
}
inline void RequestVote::set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:RequestVote.last_log_term)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// uint32 term = 1;
inline void RequestVoteResponse::clear_term() {
  term_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:RequestVoteResponse.term)
  return _internal_term();
}
inline void RequestVoteResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  term_ = value;
}
inline void RequestVoteResponse::set_term(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:RequestVoteResponse.term)
}

// bool vote_granted = 2;
inline void RequestVoteResponse::clear_vote_granted() {
  vote_granted_ = false;
}
inline bool RequestVoteResponse::_internal_vote_granted() const {
  return vote_granted_;
}
inline bool RequestVoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:RequestVoteResponse.vote_granted)
  return _internal_vote_granted();
}
inline void RequestVoteResponse::_internal_set_vote_granted(bool value) {
  
  vote_granted_ = value;
}
inline void RequestVoteResponse::set_vote_granted(bool value) {
  _internal_set_vote_granted(value);
  // @@protoc_insertion_point(field_set:RequestVoteResponse.vote_granted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
